#include "simulationservices_sbnd.fcl"
#include "messages_sbnd.fcl"

# --- modules
#include "singles_sbnd.fcl"
#include "rootoutput_sbnd.fcl"

process_name: SingleGen

# --- configure the services used by the modules
services:
{
	@table::sbnd_simulation_services
	TFileService: { fileName: "my_test_root.root" }
}

# --- start each new event with an empty event
source:
{
	module_type: EmptyEvent
	timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
	maxEvents: 10
	firstRun: 1
	firstEvent: 1
}

# --- define and configure some modules to do work on each event
physics:
{
	producers: 
	{
		rns: { module_type: "RandomNumberSaver" }
		generator: @local::sbnd_singlep
	}
	simulate: [ rns, generator ]
	stream1: [ out1 ]
	trigger_paths: [ simulate ]
	end_paths: [ stream1 ]
}

# --- block to define where the output goes
outputs:
{
	out1:
	{
		@table::sbnd_rootoutput
		fileName: "prodsingle_sbnd_%p-%tc.root"
	}
}

# --- override single parameters to reflect our needs

physics.producers.generator.PDG: [11, 13]  # electrons and muons
physics.producers.generator.P0: [0.7, 0.8] # GeV/c
physics.producers.generator.T0: [1.7e-3, 0]  # us
physics.producers.generator.SigmaP: [0.0, 0.0] #GeV/c
physics.producers.generator.PDist: 0
physics.producers.generator.X0: [150.0, 20.0] # cm
physics.producers.generator.Y0: [150.0, 20.0] # cm
physics.producers.generator.Z0: [-50.0, 0.0] # cm
physics.producers.generator.SigmaX: [0.0, 0.0]
physics.producers.generator.SigmaY: [0.0, 0.0]
physics.producers.generator.SigmaZ: [0.0, 0.0]
physics.producers.generator.SigmaT: [0.0, 0.0]
physics.producers.generator.Theta0XZ: [15.0, 15.0] # degrees
physics.producers.generator.Theta0YZ: [-15.0, 15.0] # degrees
physics.producers.generator.SigmaThetaXZ: [0.0, 0.0] # degrees
physics.producers.generator.SigmaThetaYZ: [0.0, 0.0] # degrees
